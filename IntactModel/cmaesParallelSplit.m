function costs = cmaesParallelSplit(gainsPop)
    global rtp InitialGuess model
    %% Data plotting during optimization
%     global dataQueueD
    dataQueueD = parallel.pool.DataQueue;
    dataQueueD.afterEach(@plotProgressOptimization);

    %% allocate costs vector and paramsets the generation
    popSize = size(gainsPop,2);
    costs = nan(1,popSize);
    paramSets = cell(popSize,1);

    %create param sets
    for i = 1:popSize
        Gains = InitialGuess.*exp(gainsPop(:,i));
        paramSets{i} = Simulink.BlockDiagram.modifyTunableParameters(rtp, ...
            'GainFGLUst',               Gains( 1), ...
            'GainFVASst',               Gains( 2), ...
            'GainFSOLst',               Gains( 3), ...
            'GainFHAMst',               Gains( 4), ...
            'LceOffsetBFSHVASst',       Gains( 5), ...
            'GainLBFSHVASst',           Gains( 6), ...
            'LceOffsetBFSHst',          Gains( 7), ...
            'GainLBFSHst',              Gains( 8), ...
            'GainFGASst',               Gains( 9), ...
            'GainPhiHATHFLst',          Gains(10), ...
            'GainDphiHATHFLst',         Gains(11), ...
            'GainPhiHATGLUst',          Gains(12), ...
            'GainDphiHATGLUst',         Gains(13), ...
            'GainSGLUHAMst',            Gains(14), ...
            'GainSGLUcHFLst',           Gains(15), ...
            'GainSHAMcHFLst',           Gains(16), ...
            'GainSHFLcGLUst',           Gains(17), ...
            'GainSRFcGLUst',            Gains(18), ...
            'LceOffsetTAst',            Gains(19), ...
            'GainLTAst',                Gains(20), ...
            'GainFSOLTAst',             Gains(21), ...
            'GainLTAsw',                Gains(22), ...
            'LceOffsetTAsw',            Gains(23), ...
            'GainLRFHFLsw',             Gains(24), ...
            'GainVRFHFLsw',             Gains(25), ...
            'GainLHAMGLUsw',            Gains(26), ...
            'GainVHAMGLUsw',            Gains(27), ...
            'GainVRFBFSHsw',            Gains(28), ...
            'GainVVASRFsw',             Gains(29), ...
            'GainVBFSHsw',              Gains(30), ...
            'GainLHAMsw',               Gains(31),...
            'GainSHAMBFSHsw',           Gains(32), ...
            'GainSHAMGASsw',            Gains(33), ...
            'SHAMthresholdsw',          Gains(34), ...
            'GainLHFLsw',               Gains(35), ...
            'GainLGLUsw',               Gains(36), ...
            'LceOffsetVASsw',           Gains(37), ...
            'GainLVASsw',               Gains(38), ...
            'legLengthClr',             Gains(39), ...
            'simbiconLegAngle0',        Gains(40), ...
            'simbiconGainD',            Gains(41), ...
            'simbiconGainV',            Gains(42), ...
            'deltaLegAngleThr',         Gains(43), ...
            'transSupst',               Gains(44), ...
            'transsw',                  Gains(45), ...
            'PreStimHFLst',             Gains(46), ...
            'PreStimGLUst',             Gains(47), ...
            'PreStimHAMst',             Gains(48), ...
            'PreStimRFst',              Gains(49), ...
            'PreStimVASst',             Gains(50), ...
            'PreStimBFSHst',            Gains(51), ...
            'PreStimGASst',             Gains(52), ...
            'PreStimSOLst',             Gains(53), ...
            'PreStimTAst',              Gains(54), ...
            'PreStimHFLsw',             Gains(55), ...
            'PreStimGLUsw',             Gains(56), ...
            'PreStimHAMsw',             Gains(57), ...
            'PreStimRFsw',              Gains(58), ...
            'PreStimVASsw',             Gains(59), ...
            'PreStimBFSHsw',            Gains(60), ...
            'PreStimGASsw',             Gains(61), ...
            'PreStimSOLsw',             Gains(62), ...
            'PreStimTAsw',              Gains(63), ...
            'phiHATref',                Gains(64));
    end

    %simulate each sample and store cost
    parfor i = 1:popSize
        localGains = InitialGuess.*exp(gainsPop(:,i));
        [costs(i),dataStruct] = evaluateCostParallel(paramSets{i},model,localGains)
        if ~isempty(fieldnames(dataStruct))
            send(dataQueueD,dataStruct);
        end
    end

%     for i = 1:popSize
%         Gains = InitialGuess.*exp(gainsPop(:,i));
%         paramSets{i} = Simulink.BlockDiagram.modifyTunableParameters(rtp, ...
%             'GainGAS',               Gains( 1), ...
%             'GainGLU',               Gains( 2), ...
%             'GainHAM',               Gains( 3), ...
%             'GainKneeOverExt',       Gains( 4), ...
%             'GainSOL',               Gains( 5), ...
%             'GainSOLTA',             Gains( 6), ...
%             'GainTA',                Gains( 7), ...
%             'GainVAS',               Gains( 8), ...
%             'Kglu',                  Gains( 9), ...
%             'PosGainGG',             Gains(10), ...
%             'SpeedGainGG',           Gains(11), ...
%             'GainHAMHFL',            Gains(12), ...
%             'GainHFL',               Gains(13), ...
%             'Klean',                 Gains(14), ...
%             'Kham',                  Gains(15), ...
%             'Khfl',                  Gains(16), ...
%             'DeltaSGLU',             Gains(17), ...
%             'DeltaSHFL',             Gains(18));
%     end